import json
import os
from http.client import responses
from urllib.parse import quote
import streamlit as st
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Multi-Service Dashboard",
    page_icon=":wrench:",
    layout="wide"
)

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
st.markdown("""
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 24px;
        border-radius: 8px;
    }
    .stTextInput>div>div>input {
        padding: 10px;
    }
    .css-1v0mbdj {
        border-radius: 10px;
    }
    </style>
    """, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
st.title(":wrench: Multi-Service Dashboard")
st.markdown("---")

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
service = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å",
    ["–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–æ–≤", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–Ω–µ–µ–∫", "–ü–∞—Ä—Å–µ—Ä –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –î–ú", "–ü–∞—Ä—Å–µ—Ä Globus", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –¢–¢","–û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
    index=0
)

# –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤
if service == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–æ–≤":
    st.markdown("""
    <h2>üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ <span style='color: white;'>(8080)</span></h2>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open('file_paths.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            networks = config["files"]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        st.stop()

    # –í—ã–±–æ—Ä —Å–µ—Ç–∏
    option = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        [net["name"] for net in networks],
        index=0
    )

    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        selected = next((net for net in networks if net["name"] == option), None)

        if not selected:
            st.error("–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        file_path = selected["path"]
        response = requests.get('http://localhost:8080/volumes', params={'file_path': file_path})
        if response.status_code == 200:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_path = f"processed_result.xlsx"
            with open(output_path, "wb") as f:
                f.write(response.content)

            with open(output_path, "rb") as f:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=f,
                    file_name=output_path,
                    mime="application/vnd.ms-excel"
                )

            os.remove(output_path)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
    else:
        st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å!")

# –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–µ—Ä–∞ 1
elif service == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–Ω–µ–µ–∫":
    st.markdown("""
        <h2>üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–Ω–µ–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ <span style='color: white;'>(8081)</span></h2>
        """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open('file_paths.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            networks = config["files"]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        st.stop()

    # –í—ã–±–æ—Ä —Å–µ—Ç–∏
    option = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        [net["name"] for net in networks],
        index=0
    )

    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        selected = next((net for net in networks if net["name"] == option), None)

        if not selected:
            st.error("–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        file_path = selected["path"]
        response = requests.get('http://localhost:8081/lines', params={'file_path': file_path})
        if response.status_code == 200:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_path = f"processed_result.xlsx"
            with open(output_path, "wb") as f:
                f.write(response.content)

            with open(output_path, "rb") as f:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=f,
                    file_name=output_path,
                    mime="application/vnd.ms-excel"
                )

            os.remove(output_path)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")
    else:
        st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å!")


# –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel 1
elif service == "–ü–∞—Ä—Å–µ—Ä –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –î–ú":
    st.markdown("""
            <h2>üß∏ –ü–∞—Ä—Å–µ—Ä –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –î–ú <span style='color: white;'>(8082)</span></h2>
            """, unsafe_allow_html=True)

    min_row = st.number_input(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å",
        min_value=0,
        value=0,
        step=1
    )

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"):
        response = requests.get('http://localhost:8082/detskiy_mir', params={'min_row': min_row})
        if response.status_code == 200:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_path = f"processed_result.xlsx"
            with open(output_path, "wb") as f:
                f.write(response.content)

            with open(output_path, "rb") as f:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=f,
                    file_name=output_path,
                    mime="application/vnd.ms-excel"
                )

            os.remove(output_path)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")

elif service == "–ü–∞—Ä—Å–µ—Ä Globus":
    st.markdown("""
            <h2>üåé –ü–∞—Ä—Å–µ—Ä Globus (–ë—Ä–µ–Ω–¥—ã, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –æ–±—ä–µ–º—ã, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è) <span style='color: white;'>(8083)</span></h2>
            """, unsafe_allow_html=True)

    min_row = st.number_input(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å",
        min_value=0,
        value=0,
        step=1
    )

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"):
        response = requests.get('http://localhost:8083/globus', params={'min_row': min_row})
        if response.status_code == 200:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_path = f"processed_result.xlsx"
            with open(output_path, "wb") as f:
                f.write(response.content)

            with open(output_path, "rb") as f:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=f,
                    file_name=output_path,
                    mime="application/vnd.ms-excel"
                )

            os.remove(output_path)
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")

elif service == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –¢–¢":
    st.markdown("""
                <h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–π –Ω–∞ –ø—É—Å—Ç—ã–µ –¢–¢ <span style='color: white;'>(8084)</span></h2>
                """, unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'selected_networks' not in st.session_state:
        st.session_state.selected_networks = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open('file_paths.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            networks = config["files"]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        st.stop()

    # –í—ã–±–æ—Ä —Å–µ—Ç–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –Ω–∞ "online")
    available_nets = [net["name"] for net in networks if net["segment"] == "offline"]

    # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–µ–π
    set_stores_net = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        available_nets,
        default=st.session_state.selected_networks,
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ç–µ–π"
    )
    st.session_state.selected_networks = set_stores_net

    # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                     help="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏",
                     use_container_width=True,
                     key="select_all_btn"):
            st.session_state.selected_networks = available_nets.copy()
            st.rerun()
    with col2:
        analyze_clicked = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                                    type="primary",
                                    use_container_width=True,
                                    key="analyze_btn")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if analyze_clicked:
        if not st.session_state.selected_networks:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            st.stop()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        selected_files = [(net['name'], quote(net['path']))
                          for net in networks if net['name'] in st.session_state.selected_networks]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç FastAPI
        params = {"files_paths": json.dumps(selected_files)}

        try:
            with st.spinner("–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                response = requests.get('http://localhost:8084/tts', params=params)
                response.raise_for_status()
                result = response.json()

            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if isinstance(result, dict) and 'result' in result:
                if isinstance(result['result'], list) and len(result['result']) > 0:
                    st.markdown("**–ü–æ –¥–∞–Ω–Ω—ã–º —Å–µ—Ç—è–º –µ—Å—Ç—å –Ω–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞**")
                    st.json(result)
                else:
                    st.markdown("**–ü–æ –≤—Å–µ–º —Å–µ—Ç—è–º –∞–¥—Ä–µ—Å–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã**")
            else:
                st.markdown("**–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞**")
                st.json(result)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")

# –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
st.sidebar.markdown("---")
st.sidebar.subheader("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
service_status = {
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–æ–≤": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–Ω–µ–µ–∫": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
    "–ü–∞—Ä—Å–µ—Ä –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –î–ú": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
    "–ü–∞—Ä—Å–µ—Ä Globus": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –¢–¢": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
    "–û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞": "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
}

for service_name, status in service_status.items():
    st.sidebar.markdown(f"{service_name}: {status}")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("¬© 2025 Multi-Service Dashboard | [–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞](mailto:speranskiy_d@synergetic.ru)")